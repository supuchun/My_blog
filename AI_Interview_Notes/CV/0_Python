1、python运行慢原因 
	“它是GIL（全局解释器锁）”
		当变量在多个线程内共享时，就出现了这个难题：CPython如何锁定引用计数。有一个“全局解释器锁”，它小心地控制线程执行。解释器一次只能执行一个操作，无论它有多少线程。
	“这是由于它是解释的，而非编译”
		在终端上执行python myscript.py，那么CPython会启动读取、分析、解析、编译、解释和执行代码的一长串操作。
	“这是由于它是一种动态类型语言”
		在“静态类型”语言中，你在声明变量时必须指定变量的类型。这样的语言包括C、C++、Java、C#和Go。
		在动态类型语言中，仍然存在类型这个概念，但变量的类型是动态的。静态类型语言不是为了给你添堵而设计的，它们是兼顾CPU的运行方式设计的。
		如果一切最终需要等同于简单的二进制操作，你就得将对象和类型转换成低级数据结构。
		
	结论：Python之所以速度慢，主要是由于动态性和多功能性。Python有更优化、速度更快的几个替代方案：充分利用异步、深入了解分析工具以及考虑使用多个解释器

	对于性能优先并且有更多静态变量的代码部分，请考虑使用Cython。Cython，它结合了C-Static类型和Python来优化已知类型的代码，可以提供84倍速度的性能提升。

	一行代码让python的运行速度提高100倍：from numba import jit
	numba所完成的工作就是：
		解析Python函数的ast语法树并加以改造，添加类型信息；
		将带类型信息的ast语法树通过llvmpy动态地转换为机器码函数，然后再通过和ctypes类似的技术为机器码函数创建包装函数供Python调用。

	PYTHON是一种脚本语言，是解释执行的，不需要经过编译，所以很方便快捷，且能够很好地跨平台，写一些小工具小程序特别合适。
	而C++则是一种需要编译后运行语言，在特定的机器上编译后在特定的机上运行，运行效率高，安全稳定。但编译后的程序一般是不跨平台的。

2、