1、 HTTP 协议有一个缺陷：通信只能由客户端发起。HTTP 协议做不到服务器主动向客户端推送信息。这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。
    我们只能使用"轮询"：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。
    因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。
    （1）建立在 TCP 协议之上，服务器端的实现比较容易。
    （2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。

2、Websocket是基于HTTP协议的，或者说借用了HTTP的协议来完成一部分握手。基于TCP的应用层协议，只需要一次连接，以后的数据不需要重新建立连接，可以直接发送，它是基于TCP的，属于和HTTP相同的地位。
    HTML5开始提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。 
    WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。

3、WebSocket的目的就是解决网络传输中的双向通信的问题，HTTP1.1默认使用持久连接，在一个TCP连接上也可以传输多个Request/Response消息对，但是HTTP的基本模型还是一个Request对应一个Response。

4、HTTP、WebSocket等应用层协议，都是基于TCP协议来传输数据的。我们可以把这些高级协议理解成对TCP的封装。大家都使用TCP协议，那么连接和断开，都要遵循TCP协议中的三次握手和四次挥手，
    只是在连接之后发送的内容不同，或者是断开的时间不同。对于 WebSocket 来说，它必须依赖 HTTP 协议进行一次握手 ，握手成功后，数据就直接从 TCP 通道传输，与 HTTP 无关了。

5、WebSocket协议主要分为两部分：连接许可验证 和验证后的数据交互。

6、