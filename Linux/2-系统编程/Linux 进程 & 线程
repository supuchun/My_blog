1、[root@localhost ~]# ps aux；ps aux |more
   [root@localhost ~]# ps -elf

2、命令行直接top命令
    [root@localhost ~]# top
        h：获得帮助
    　　1：显示各CPU情况
    　　P：按%CPU排序
    　　M：按%MEM排序
    　　空格：马上刷新（默认3秒）
    　　q：退出（默认的top会一直占用当前端口）
    [root@localhost ~]# top -d 1 -n 5 -p 1
        -d 1    指定刷新间隔时间为1秒
        -n 5    刷新次数
        -p 1    显示指定PID为1的进程信息，如果要指定多个PID，用逗号分开；常接命令选项-p：列出进程的PID号

3、fork函数-复制进程映像，fork和exec的替换不同，调用fork函数，可复制一个和父进程一模一样的子进程。执行的代码也完全相同，但子进程有自己的数据空间，环境和文件描述符。

4、 启动新进程三种方法的比较
    1)system函数最简单，启动shell进程，并在shell进程中执行新的进程。 效率不高，system函数必须等待子进程返回才能接着执行。
    2)exec系列函数用新进程替换掉原进程，但不会返回到原进程，除非调用失败。 该函数继承了许多原进程的特性，效率也较高。
    3)fork函数，复制一个子进程，和父进程一模一样，但是拥有自己的内存空间。父子进程执行互不影响。需要注意僵尸子进程的问题。

5、系统调用的效率要明显低于I/O库，这是为什么呢？
    因为系统调用时，Linux必须从运行用户代码切换到内核代码，然后再返回用户代码。而I/O库函数会自动在数据满足数据块长度时，才调用底层系统函数。

6、常用的命令
　　head(用来看很长的文件用)
　　tail(同上)
　　netstat(看网络状态)
　　tar(解开.tar.gz的压缩包)
　　ps(察看进程)
　　kill(干掉进程)
　　top(看系统状况)
　　shutdown(关闭系统)
　　cat(看文件内容)
　　ping (看网络连通状况)
　　ftp(传输文件)
　　man(手册)

7、fork函数将运行着的程序分成2个(几乎)完全一样的进程，每个进程都启动一个从代码的同一位置开始执行的线程。这两个进程中的线程继续执行，就像是两个用户同时启动了该应用程序的两个副本。
   由fork创建的新进程被称为子进程(child process)。fork函数被调用一次但返回两次。两次返回的唯一区别是子进程中返回0值而父进程中返回子进程ID;否则，出错返回-1。
    1）fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值:在父进程中，fork返回新创建子进程的进程ID;
    2）在子进程中，fork返回0;
    3）如果出现错误，fork返回一个负值-1。
        #include <unistd.h>  
        #include <stdio.h>   
        int main ()   
       {   
            pid_t fpid; //fpid表示fork函数返回的值  
            int count=0;  
            fpid=fork();   
            if (fpid < 0)   
                printf("error in fork!");   
            else if (fpid == 0) {  
                printf("i am the child process, my process id is %d/n",getpid());   
                printf("我是爹的儿子/n");//对某些人来说中文看着更直白。  
                count++;  
            }  
            else {  
                printf("i am the parent process, my process id is %d/n",getpid());   
                printf("我是孩子他爹/n");  
                count++;  
            }  
            printf("统计结果是: %d/n",count);  
            return 0;  
        }
        用fork函数创建子进程后，子进程往往要调用一种exec函数以执行另一个程序。当进程调用一种exec函数时，该进程完全由新程序代换，而新程序则从其main函数开始执行。因为调用exec并不创建新进程，
    所以前后的进程ID并未改变。exec只是用另一个新程序替换了当前进程的正文、数据、堆和栈段。有六种不同的exec函数可供使用，它们常常被统称为exec函数。这些exec函数都是UNIX进程控制原语。
    用fork可以创建新进程，用exec可以执行新的程序。exit函数和两个wait函数处理终止和等待终止。这些是我们需要的基本的进程控制原语。
    说是exec系统调用，实际上在Linux中，并不存在一个exec()的函数形式，exec指的是一组函数，一共有6个，分别是:
        #include <unistd.h>
        extern char **environ;
        int execl(const char *path, const char *arg, ...);
        int execlp(const char *file, const char *arg, ...);
        int execle(const char *path, const char *arg, ..., char * const envp[]);
        int execv(const char *path, char *const argv[]);
        int execvp(const char *file, char *const argv[]);
        int execve(const char *path, char *const argv[], char *const envp[]);
    其中只有execve是真正意义上的系统调用，其它都是在此基础上经过包装的库函数。
    从系统实现角度讲，进程的实现是调用fork系统调用：pid_t fork(void); 创建线程：在pthread_create()向管理线程发送REQ_CREATE请求之后，管理线程即调用pthread_handle_create()创建新线程。

8、死锁是两个或两个以上的进程在执行的时候，争夺资源造成相互等待，程序卡死的一种现象

9、进程是资源分配的基本单位，线程是调度的基本单位。进程的个体间是完全独立的，而线程间是彼此依存的。多进程环境中，任何一个进程的终止，不会影响到其他进程。而多线程环境中，父线程终止，
   全部子线程被迫终止(没有了资源)。而任何一个子线程终止一般不会影响其他线程，除非子线程执行了exit()系统调用。任何一个子线程执行exit()，全部线程同时灭亡。

10、多线程编程的目的,就是"最大限度地利用CPU资源",当某一线程的处理不需要占用CPU而只和I/O,OEMBIOS等资源打交道时,让需要占用CPU资源的其它线程有机会获得CPU资源。
    每个程序执行时都会产生一个进程，而每一个进程至少要有一个主线程。这个线程其实是进程执行的一条线索，除了主线程外你还可以给进程增加其它的线程，也即增加其它的执行线索，
    由此在某种程度上可以看成是给一个应用程序增加了多任务功能。多线程就是在一个进程内有多个线程。从而使一个应用程序有了多任务的功能。
    单线程只会映射到一个CPU上，而多线程会映射到多个CPU上，超线程技术本质是多线程硬件化，所以也会加快程序的执行速度。

11、linux下为了多线程同步，通常用到锁的概念。
    posix下抽象了一个锁类型的结构：ptread_mutex_t。通过对该结构的操作，来判断资源是否可以访问。顾名思义，加锁(lock)后，别人就无法打开，只有当锁没有关闭(unlock)的时候才能访问资源。
    使用互斥锁（互斥）可以使线程按顺序执行。通常，互斥锁通过确保一次只有一个线程执行代码的临界段来同步多个线程。互斥锁还可以保护单线程代码。
     1．函数原型：
        int pthread_mutex_init(pthread_mutex_t *restrict mutex,
                    const pthread_mutexattr_t *restrict attr);
        该函数用于C函数的多线程编程中，互斥锁的初始化。
        pthread_mutexattr_init()函数成功完成之后会返回零，其他任何返回值都表示出现了错误。
　　    函数成功执行后，互斥锁被初始化为锁住态。

12、pthread_barrier_xxx系列函数在<pthread.h>中定义，用于多线程的同步，它包含下列三个函数：
      —pthread_barrier_init(); init函数负责指定要等待的线程个数；
      —pthread_barrier_wait(); wait()函数由每个线程主动调用，它告诉栏杆“我到起跑线前了”。wait()执行末尾栏杆会检查是否所有人都到栏杆前了，如果是，栏杆就消失所有线程继续执行下一句代码；
                               如果不是，则所有已到wait()的线程停在该函数不动，剩下没执行到wait()的线程继续执行；
      —pthread_barrier_destroy(); destroy函数释放init申请的资源
    pthread_barrier_xxx其实只做且只能做一件事，就是充当栏杆（barrier意为栏杆）形象的说就是把先后到达的多个线程挡在同一栏杆前，直到所有线程到齐，然后撤下栏杆同时放行。
    
13、posix消息队列
    消息队列可以看作一系列消息组织成的链表，一个程序可以往这个链表添加消息，另外的程序可以从这个消息链表读走消息。mq_open()函数打开或创建一个posix消息队列。

14、CPU擅长逻辑控制，是串行计算，而GPU擅长高强度计算，是并行计算。GPU就像成千上万的苦力，每个人干的都是类似的苦力活，相互之间没有依赖，都是独立的，简单的人多力量大；CPU就像包工头，
    虽然也能干苦力的活，但是人少，所以一般负责任务分配，人员调度等工作。GPU加速是通过大量线程并行实现的，因此对于不能高度并行化的工作而言，GPU就没什么效果了。而CPU则是串行操作，
    需要很强的通用性，主要起到统管和分配任务的作用。
