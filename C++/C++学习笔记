@@ -1,344 +0,0 @@
简要介绍：Linux主要有三个方向：运维、应用、底层，而Linux C/C++ 开发（Linux 服务器开发）这个方向
    目前从事 Linux C/C++ 开发的程序员很多，尤其是像百度、腾讯、阿里这样的大公司，他们的网站流量巨大，业务逻辑复杂，会遇到很多瓶颈，需要开发底层服务来提高程序效率，快速响应用户请求。
    这些公司的 Linux C/C++ 开发属于底层开发（后台服务、算法支持等），而不是应用开发，编写的程序在后台运行，没有界面，不直接面向用户。
    有了数年应用开发的经验，对用户、业务、交互等都非常了解了，转底层开发很容易，也知道应用层的瓶颈在哪里，明白如何在底层做优化。
    那么，这个方向到底适合不适合初学者呢？初学者肯定可以学习，也肯定能找到相关的工作，但是，如果没有应用开发的经验，个人认为只学底层开发是非常枯燥的，因为每天面对一堆理论，早晚吐血。
    初学者可以给自己树立一个目标，做一个类似 QQ 这样的软件出来，它可以有无限的优化空间，比如：
        刚开始只是用 Qt、GTK+、WxWidgets、Fltk 等 GUI 库构建了一个界面，并不能发送和接受信息。
        增加一对一聊天功能，在这个过程中可以学习通信（socket）。
        同时支持多人聊天，每增加一个对话就开启了一个线程，这个过程中可以学习多线程编程。
        提高服务器的性能，让单台服务器同时抗住一万个人聊天，这个时候你可能就需要去优化程序了，就需要关注线程创建、调度的开销，关注通信过程中的缓存。
        增加群聊功能，让服务器可以给多个用户发送消息，这个时候你对通信的理解将更加深入。
        最后呢，你可以将多台服务器联合起来，抗住几十万人甚至上百万人聊天。
    可以自己完成这个项目，也可以组队完成，在这个过程中你将会全方位的学习 Linux C/C++ 编程。
    总之，初学者要让学习过程变得有趣，不要天天研究操作系统、数据结构、算法、内存、线程进程、通信等理论，一定要去实践。
    
1、虚函数的定义要遵循以下重要规则： 
    1.如果虚函数在基类与派生类中出现，仅仅是名字相同，而形式参数不同，或者是返回类型不同，那么即使加上了virtual关键字，也是不会进行滞后联编的。 
    2.只有类的成员函数才能说明为虚函数，因为虚函数仅适合用与有继承关系的类对象，所以普通函数不能说明为虚函数。 
    3.静态成员函数不能是虚函数,因为静态成员函数的特点是不受限制于某个对象。 
    4.内联(inline)函数不能是虚函数，因为内联函数不能在运行中动态确定位置。即使虚函数在类的内部定义定义，但是在编译的时候系统仍然将它看做是非内联的。 
    5.构造函数不能是虚函数，因为构造的时候，对象还是一片位定型的空间，只有构造完成后，对象才是具体类的实例。 
    6.析构函数可以是虚函数,而且通常声名为虚函数。 

2、在C++中,类和结构是只有一个区别的：类的成员默认是private，而结构是public。
   C和C++中都有结构的概念，但是在C语言中结构只有成员变量，而没成员方法，而在C++中结构中，它可以有自己的成员变量和成员函数。但是在C语言中结构的成员是公共的，
   什么想访问它的都可以访问；而在VC++中没有加限定符的类的成员默认是private，而结构是public。

   附加：C语言中的 struct 只能包含变量，而C++中的 class 除了可以包含变量，还可以包含函数。函数fun() 是用来处理成员变量的函数，
   在C语言中，我们将它放在了 struct Student 外面，它和成员变量是分离的；而在C++中，我们将它放在了 class Student 内部，使它和成员变量聚集在一起，看起来更像一个整体。

3、将func1和func2封装成一个DLL，能够直接让func3调用

4、静态库和动态库是两种共享程序代码的方式，它们的区别是：静态库在程序的链接阶段被复制到了程序中，和程序运行的时候没有关系；动态库在链接阶段没有被复制到程序中，
   而是程序在运行时由系统动态加载到内存中供程序调用。使用动态库的优点是系统只需载入一次动态库，不同的程序可以得到内存中相同的动态库的副本，因此节省了很多内存。
   Windows下动态库为.dll后缀，在linux在为.so后缀。

5、程序的错误大致可以分为三种，分别是语法错误、逻辑错误和运行时错误：
    1) 语法错误在编译和链接阶段就能发现，只有 100% 符合语法规则的代码才能生成可执行程序。语法错误是最容易发现、最容易定位、最容易排除的错误，程序员最不需要担心的就是这种错误。
    2) 逻辑错误是说我们编写的代码思路有问题，不能够达到最终的目标，这种错误可以通过调试来解决。
    3) 运行时错误是指程序在运行期间发生的错误，例如除数为 0、内存分配失败、数组越界、文件不存在等。C++ 异常（Exception）机制就是为解决运行时错误而引入的。
       运行时错误如果放任不管，系统就会执行默认的操作，终止程序运行，也就是我们常说的程序崩溃（Crash）。C++ 提供了异常（Exception）机制，让我们能够捕获运行时错误，给程序一次“起死回生”的机会，
       或者至少告诉用户发生了什么再终止程序。
6、抛出（Throw）--> 检测（Try） --> 捕获（Catch）
    异常必须显式地抛出，才能被检测和捕获到；如果没有显式的抛出，即使有异常也检测不到。
    在 C++ 中，我们使用 throw 关键字来显式地抛出异常，它的用法为：throw exceptionData;

7、模板所支持的类型是宽泛的，没有限制的，我们可以使用任意类型来替换，这种编程方式称为泛型编程（Generic Programming）。
    相应地，可以将参数 T 看做是一个泛型，而将 int、float、string 等看做是一种具体的类型。C++ 模板也是被迫推出的，最直接的动力来源于对数据结构的封装。
    C++ 开发者们希望为线性表、链表、图、树等常见的数据结构都定义一个类，并把它们加入到标准库中，这样以后程序员就不用重复造轮子了，直接拿来使用即可。
    以链表为例，它的每个节点可以用来存储小数、整数、字符串等，也可以用来存储一名学生、教师、司机等，还可以直接存储二进制数据，这些都是可以的，没有任何限制。
    而 C++ 又是强类型的，数据的种类受到了严格的限制，这种矛盾是无法调和的。STL（Standard Template Library，标准模板库）就是 C++ 对数据结构进行封装后的称呼
    
8、在iostream头文件中重载运算符
    “<<”和“>>”本来在C++中是被定义为左位移运算符和右位移运算符的，由于在iostream头文件中对它们进行了重载，使它们能用作标准类型数据的输入和输出运算符。所以，
    在用它们的程序中必须用#include命令把iostream包含到程序中。 #include <iostream> 
    如果在程序中有下面的表达式：
    cout<<"C++";
    实际上相当于：
    cout.operator <<("C++")
    cout和cin并不是C++语言中提供的语句，它们是iostream类的对象，printf和scanf是C语言库函数中的输入输出函数。当向cout流插 人一个endl时，不论缓冲区是否已满，
    都立即输出流中所有数据，然后插入一个换行符， 并刷新流（清空缓冲区）。注意如果插人一个换行符”\n“（如cout<<a<<"\n"），则只输出和换行，而不刷新cout流(但并不是所有编译系统都体现出这一区别）。

9、除了会将原有对象的所有成员变量拷贝给新对象，还会为新对象再分配一块内存，并将原有对象所持有的内存也拷贝过来。这样做的结果是，原有对象和新对象所持有的动态内存是相互独立的，
    更改一个对象的数据不会影响另外一个对象，这种将对象所持有的其它资源一并拷贝的行为叫做深拷贝，我们必须显式地定义拷贝构造函数才能达到深拷贝的目的。

10、C/C++编译的程序占用的内存分为以下几个部分 
    栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈
    堆区（heap） — 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回 收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表 
    全局区（静态区）（static）—，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另 一块区域。 - 程序结束后由系统释放。
    文字常量区 —常量字符串就是放在这里的， 程序结束后由系统释放
    程序代码区—存放函数体的二进制代码。
        //main.cpp
        int a = 0;   //全局初始化区
        char *p1;   //全局未初始化区
        main()
        {
            int   b;   //栈
            char   s[] = "abc";   //栈
            char   *p2; //栈
            char   *p3 = "123456";   //123456/0在常量区，p3在栈上。
            static   int   c =0；   //全局（静态）初始化区
            p1   = (char *)malloc(10);
            p2   = (char *)malloc(20); //分配得来得10和20字节的区域就在堆区。
            strcpy(p1, "123456");   //123456/0放在常量区，编译器可能会将它与p3所指向的"123456"优化成一个地方。
        }

11、linux--进程在内存中的布局
    代码区:程序(函数)代码所在,由编译而得到的二进制代码被载入至此.代码区是只读的!有执行权限.代码区一般都从0x08048000地址开始(linux下).值得注意的是,字符串字面值(如"Hello World")就存储在这个区.
　　数据段和BSS段:合称静态区(全局区),用来存储静态(全局)变量.区别是 前者(数据段)存储的是已初始化的静态(全局)变量,可读写. 后者(BSS段)存储的是未初始化的静态(全局)变量,可读写.
　　堆:自由存储区.不像全局变量和局部变量的生命周期被严格定义,堆区的内存分配和释放是由程序员所控制的.申请方式:C中是malloc函数,C++中是new标识符.
　　栈:由系统自动分配和释放.存储局部(自动)变量. 一般说的堆栈,其实是指栈!另外,值得注意的是,堆是由低地址向高地址分配空间;栈却是由高地址向低地址分配空间.
    静态(static)全局变量 和 静态(static)局部变量 都在 静态全局区.
        #include <stdio.h>
        #include <stdlib.h>
        int i1 = 10; //静态全局区(data段)
        int i2; //静态全局区(bss段)
        static int i3 = 30; //静态全局区(data段)
        const int i4 = 40;  //代码区!!!
        void fun(int i5) //栈区
        {
            int i6 = 60; //栈区
            static int i7 = 70; //静态全局区(data段)
            const int i8 = 80; //栈区!!!
            char* str1 = "ABCDE"; //代码区(字符串常量)
            char str2[] = "ABCDE"; //栈区(字符数组)
            int* pi = malloc(sizeof(int)); //堆区
            printf("&i5=%p\n", &i5);
            printf("&i6=%p\n", &i6);
            printf("&i7=%p\n", &i7);
            printf("&i8=%p\n", &i8);
            printf("str1=%p\n", str1);
            printf("str2=%p\n", str2);
            printf("pi=%p\n", pi);
            free(pi);
        }
        
        int main(void)
        {
            printf("&i1=%p\n", &i1);
            printf("&i2=%p\n", &i2);
            printf("&i3=%p\n", &i3);
            printf("&i4=%p\n", &i4);
            fun(50);
            return 0;
        }

12、main(int argc, char*argv[])这个函数中两个参数的意义，argc记录的是命令行中输入参数的数目，argv是一个拥有argc个元素的字符串数组，每个元素保存一个命令行中输入的参数。

13、strcpy
        原型：extern char *strcpy(char *dest,char *src);
        用法：＃i nclude
        功能：把src所指由NULL结束的字符串复制到dest所指的数组中。
        说明：src和dest所指内存区域不可以重叠且dest必须有足够的空间来容纳src的字符串。
        返回指向dest的指针。
    memcpy
        原型：extern void *memcpy(void *dest, void *src, unsigned int count);
        用法：＃i nclude
        功能：由src所指内存区域复制count个字节到dest所指内存区域。
        说明：src和dest所指内存区域不能重叠，函数返回指向dest的指针。
    memset
        原型：extern void *memset(void *buffer, int c, int count);
        用法：＃i nclude
        功能：把buffer所指内存区域的前count个字节设置成字符c。
        说明：返回指向buffer的指针。

14、学习C++的过程中我们经常会用到.和::和：和->，在此整理一下这些常用符号的区别。
    1、A.B则A为对象或者结构体；
    2、A->B则A为指针，->是成员提取，A->B是提取A中的成员B，A只能是指向类、结构、联合的指针；
    3、::是作用域运算符，A::B表示作用域A中的名称B，A可以是名字空间、类、结构；
    4、：一般用来表示继承；

15、
class Student{
public:
    //类包含的变量
    char *name;
    int age;
    float score;
    //类包含的函数
    void say(){
        cout<<name<<"的年龄是"<<age<<"，成绩是"<<score<<endl;
    }
};

Student stu;  //stu 在栈上分配内存
Student *pStu = &stu;  //stu 在栈上分配内存

Student *pStu = new Student;  //在堆上创建对象，这个时候就需要使用到new关键字
delete pStu;  //删除对象

    在栈上创建出来的对象都有一个名字，比如 stu，使用指针指向它不是必须的。
    但是通过 new 创建出来的对象就不一样了，它在堆上分配内存，没有名字，只能得到一个指向它的指针，
    所以必须使用一个指针变量来接收这个指针，否则以后再也无法找到这个对象了，更没有办法使用它。
    也就是说，使用 new 在堆上创建出来的对象是匿名的，没法直接使用，必须要用一个指针指向它，
    再借助指针来访问它的成员变量或成员函数。

    栈内存是程序自动管理的，不能使用 delete 删除在栈上创建的对象；堆内存由程序员管理，
    对象使用完毕后可以通过 delete 删除。在实际开发中，new 和 delete 往往成对出现，以保证及时删除不再使用的对象，防止无用内存堆积。


16、将成员变量声明为 private、将部分成员函数声明为 public 的做法体现了类的封装性。所谓封装，是指尽量隐藏类的内部实现，只向用户提供有用的成员函数。
    将成员变量设置为 private 是一种软件设计规范，尤其是在大中型项目中，还是请大家尽量遵守这一原则。
    如果既不写 private 也不写 public，就默认为 private。
    给成员变量赋值的函数通常称为 set 函数,读取成员变量的值的函数通常称为 get 函数。

    #include <iostream>
    using namespace std;

    //类的声明
    class Student{
    private:  //私有的
        char *m_name;
        int m_age;
        float m_score;

    public:  //共有的
        void setname(char *name);
        void setage(int age);
        void setscore(float score);
        void show();
    };

    //成员函数的定义
    void Student::setname(char *name){
        m_name = name;
    }
    void Student::setage(int age){
        m_age = age;
    }
    void Student::setscore(float score){
        m_score = score;
    }
    void Student::show(){
        cout<<m_name<<"的年龄是"<<m_age<<"，成绩是"<<m_score<<endl;
    }

    int main(){
        //在栈上创建对象
        Student stu;
        stu.setname("小明");
        stu.setage(15);
        stu.setscore(92.5f);
        stu.show();

        //在堆上创建对象
        Student *pstu = new Student;
        pstu -> setname("李华");
        pstu -> setage(16);
        pstu -> setscore(96);
        pstu -> show();
        delete stu;

        return 0;
    }

17、在C++中，有一种特殊的成员函数，它的名字和类名相同，没有返回值，不需要用户显式调用（用户也不能调用），而是在创建对象时自动执行。这种特殊的成员函数就是构造函数。
    构造函数必须是 public 属性的，否则创建对象时无法调用。设置为 private、protected 属性也不会报错，但是没有意义。
    构造函数没有返回值，因为没有变量来接收返回值，即使有也毫无用处，这意味着：
    不管是声明还是定义，函数名前面都不能出现返回值类型，即使是 void 也不允许；
    函数体中不能有 return 语句。

    #include <iostream>
    using namespace std;

    //类的声明
    class Student{
    private:  //私有的
        char *m_name;
        int m_age;
        float m_score;

    public:  
        //声明构造函数
        Student(char *m_name, int m_age, float m_score);
        //声明析构函数
        virtual ~Student(char *m_name, int m_age, float m_score);
        //声明普通成员函数
        void show();
    };

    //定义构造函数
    Student::Student(char *m_name, int m_age, float m_score) {
        m_name = name;
        m_age = age;
        m_score = score;
    }
    //定义析构函数
    virtual ~Student(char *m_name, int m_age, float m_score) {

    }
    //定义普通成员函数
    void Student::show(){
        cout<<m_name<<"的年龄是"<<m_age<<"，成绩是"<<m_score<<endl;
    }

    int main(){
        //创建对象时向构造函数传参
        Student stu("小明", 15, 92.5f);
        stu.show();
        //创建对象时向构造函数传参
        Student *pstu = new Student("李华", 16, 96);
        pstu -> show();
        delete pstu;

        return 0;
    }

18、构造函数的调用是强制性的，一旦在类中定义了构造函数，那么创建对象时就一定要调用，不调用是错误的。构造函数在实际开发中会大量使用，它往往用来做一些初始化工作，例如对成员变量赋值、预先打开文件等。
    如果用户自己没有定义构造函数，那么编译器会自动生成一个默认的构造函数，只是这个构造函数的函数体是空的，也没有形参，也不执行任何操作。比如上面的 Student 类，默认生成的构造函数如下：
        Student(){}
    一个类必须有构造函数，要么用户自己定义，要么编译器自动生成。一旦用户自己定义了构造函数，不管有几个，也不管形参如何，编译器都不再自动生成。
    默认构造函数的目的是帮助编译器做初始化工作，而不是帮助程序员。这是C++的内部实现机制。
    最后需要注意的一点是，调用没有参数的构造函数也可以省略括号。创建对象时都没有写括号，其实是调用了默认的构造函数。
    创建对象时系统会自动调用构造函数进行初始化工作，同样，销毁对象时系统也会自动调用一个函数来进行清理工作，例如释放分配的内存、关闭打开的文件等，这个函数就是析构函数。
    析构函数（Destructor）也是一种特殊的成员函数，没有返回值，不需要程序员显式调用（程序员也没法显式调用），而是在销毁对象时自动执行。构造函数的名字和类名相同，而析构函数的名字是在类名前面加一个~符号。
    析构函数没有参数，不能被重载，因此一个类只能有一个析构函数。如果用户没有定义，编译器会自动生成一个默认的析构函数。

    C++ 中的 new 和 delete 分别用来分配和释放内存，它们与C语言中 malloc()、free() 最大的一个不同之处在于：用 new 分配内存时会调用构造函数，用 delete 释放内存时会调用析构函数。
    构造函数和析构函数对于类来说是不可或缺的，所以在C++中非常鼓励使用 new 和 delete。

    在所有函数之外创建的对象是全局对象，它和全局变量类似，位于内存分区中的全局数据区，程序在结束执行时会调用这些对象的析构函数。
    在函数内部创建的对象是局部对象，它和局部变量类似，位于栈区，函数执行结束时会调用这些对象的析构函数。
    new 创建的对象位于堆区，通过 delete 删除时才会调用析构函数；如果没有 delete，析构函数就不会被执行。

    this 是 C++ 中的一个关键字，也是一个 const 指针，它指向当前对象，通过它可以访问当前对象的所有成员。
    this 实际上是成员函数的一个形参，在调用成员函数时将对象的地址作为实参传递给 this。不过 this 这个形参是隐式的，它并不出现在代码中，而是在编译阶段由编译器默默地将它添加到参数列表中。
        this 是 const 指针，它的值是不能被修改的，一切企图修改该指针的操作，如赋值、递增、递减等都是不允许的。
        this 只能在成员函数内部使用，用在其他地方没有意义，也是非法的。
        只有当对象被创建后 this 才有意义，因此不能在 static 成员函数中使用。

    在C++中，我们可以使用静态成员变量来实现多个对象共享数据的目标。static 成员变量属于类，不属于某个具体的对象，即使创建多个对象，也只为 m_total 分配一份内存，
    所有对象使用的都是这份内存中的数据。当某个对象修改了 m_total，也会影响到其他对象。
    static 成员变量属于类，不属于某个具体的对象，即使创建多个对象，也只为 m_total 分配一份内存，所有对象使用的都是这份内存中的数据。
        static int m_total;  //静态成员变量
        int Student::m_total = 0;
    静态成员变量在初始化时不能再加 static，但必须要有数据类型。被 private、protected、public 修饰的静态成员变量都可以用这种方式初始化。
    注意：static 成员变量的内存既不是在声明类时分配，也不是在创建对象时分配，而是在（类外）初始化时分配。反过来说，没有在类外初始化的 static 成员变量不能使用。
    注意：static 成员变量不占用对象的内存，而是在所有对象之外开辟内存，即使不创建对象也可以访问。以下三种方式是等效的:
        //通过类类访问 static 成员变量
        Student::m_total = 10;
        //通过对象来访问 static 成员变量
        Student stu("小明", 15, 92.5f);
        stu.m_total = 20;
        //通过对象指针来访问 static 成员变量
        Student *pstu = new Student("李华", 16, 96);
        pstu -> m_total = 20;
    static 成员变量不随对象的创建而分配内存，也不随对象的销毁而释放内存。而普通成员变量在对象创建时分配内存，在对象销毁时释放内存。
    static 成员变量初始化时可以赋初值，也可以不赋值。如果不赋值，那么会被默认初始化为 0。

    static 除了可以声明静态成员变量，还可以声明静态成员函数。普通成员函数可以访问所有成员（包括成员变量和成员函数），静态成员函数只能访问静态成员。
    编译器在编译一个普通成员函数时，会隐式地增加一个形参 this，并把当前对象的地址赋值给 this，所以普通成员函数只能在创建对象后通过对象来调用，因为它需要当前对象的地址。
    而静态成员函数可以通过类来直接调用，编译器不会为它增加形参 this，它不需要当前对象的地址，所以不管有没有创建对象，都可以调用静态成员函数。
    普通成员变量占用对象的内存，静态成员函数没有 this 指针，不知道指向哪个对象，无法访问对象的成员变量，也就是说静态成员函数不能访问普通成员变量，只能访问静态成员变量。
    普通成员函数必须通过对象才能调用，而静态成员函数没有 this 指针，无法在函数体内部访问某个对象，所以不能调用普通成员函数，只能调用静态成员函数。
    静态成员函数与普通成员函数的根本区别在于：普通成员函数有 this 指针，可以访问类中的任意成员；而静态成员函数没有 this 指针，只能访问静态成员（包括静态成员变量和静态成员函数）。

    尖括号< >和双引号" "的区别在于头文件的搜索路径不同，记住：包含标准库的头文件建议用尖括号，包含自定义的头文件建议用双引号。

    #ifndef	如果宏没有定义，则编译下面代码，#endif	结束一个#if……#else条件编译块。


    在派生类中访问基类 private 成员的唯一方法就是借助基类的非 private 成员函数，如果基类没有非 private 成员函数，那么该成员在派生类中将无法访问。
    using 只能改变基类中 public 和 protected 成员的访问权限，不能改变 private 成员的访问权限，因为基类中 private 成员在派生类中是不可见的，根本不能使用，
    所以基类中的 private 成员在派生类中无论如何都不能访问。

    如果派生类中的成员（包括成员变量和成员函数）和基类中的成员重名，那么就会遮蔽从基类继承过来的成员。
    在派生类中使用该成员（包括在定义派生类时使用，也包括通过派生类对象访问该成员）时，实际上使用的是派生类新增的成员，而不是从基类继承来的。
    基类成员和派生类成员的名字一样时会造成遮蔽，这句话对于成员变量很好理解，对于成员函数要引起注意，不管函数的参数如何，只要名字一样就会造成遮蔽。
    换句话说，基类成员函数和派生类成员函数不会构成重载，如果派生类有同名函数，那么就会遮蔽基类中的所有同名函数，不管它们的参数是否一样。

    基类的成员函数可以被继承，可以通过派生类的对象访问，但这仅仅指的是普通的成员函数，类的构造函数不能被继承。解决这个问题的思路是：在派生类的构造函数中调用基类的构造函数。
    基类构造函数总是被优先调用，这说明创建派生类对象时，会先调用基类构造函数，再调用派生类构造函数，如果继承关系有好几层的话，例如：A --> B --> C
    那么创建 C 类对象时构造函数的执行顺序为：A类构造函数 --> B类构造函数 --> C类构造函数，构造函数的调用顺序是按照继承的层次自顶向下、从基类再到派生类的。
    派生类构造函数中只能调用直接基类的构造函数，不能调用间接基类的。以上面的 A、B、C 类为例，C 是最终的派生类，B 就是 C 的直接基类，A 就是 C 的间接基类。

    和构造函数类似，析构函数也不能被继承。与构造函数不同的是，在派生类的析构函数中不用显式地调用基类的析构函数，因为每个类只有一个析构函数，编译器知道如何选择，无需程序员干涉。
    另外析构函数的执行顺序和构造函数的执行顺序也刚好相反：
    创建派生类对象时，构造函数的执行顺序和继承顺序相同，即先执行基类构造函数，再执行派生类构造函数。
    而销毁派生类对象时，析构函数的执行顺序和继承顺序相反，即先执行派生类析构函数，再执行基类析构函数。

    通过基类指针只能访问派生类的成员变量，但是不能访问派生类的成员函数。
    为了消除这种尴尬，让基类指针能够访问派生类的成员函数，C++ 增加了虚函数（Virtual Function）。使用虚函数非常简单，只需要在函数声明前面增加 virtual 关键字。
    有了虚函数，基类指针指向基类对象时就使用基类的成员（包括成员函数和成员变量），指向派生类对象时就使用派生类的成员。
    换句话说，基类指针可以按照基类的方式来做事，也可以按照派生类的方式来做事，它有多种形态，或者说有多种表现方式，我们将这种现象称为多态（Polymorphism）。
    多态是面向对象编程的主要特征之一，C++中虚函数的唯一用处就是构成多态。
    C++提供多态的目的是：可以通过基类指针对所有派生类（包括直接派生和间接派生）的成员变量和成员函数进行“全方位”的访问，尤其是成员函数。如果没有多态，我们只能访问成员变量。
    虚函数是根据指针的指向来调用的，指针指向哪个类的对象就调用哪个类的虚函数。
    借助引用也可以实现多态，引用在本质上是通过指针的方式实现的，既然借助指针可以实现多态，那么我们就有理由推断：借助引用也可以实现多态。

    #include <iostream>
    using namespace std;
    //基类People
    class People{
    public:
        People(char *name, int age);
        virtual void display();  //声明为虚函数
    protected:
        char *m_name;
        int m_age;
    };
    People::People(char *name, int age): m_name(name), m_age(age){}
    void People::display(){
        cout<<m_name<<"今年"<<m_age<<"岁了，是个无业游民。"<<endl;
    }
    //派生类Teacher
    class Teacher: public People{
    public:
        Teacher(char *name, int age, int salary);
        virtual void display();  //声明为虚函数
    private:
        int m_salary;
    };
    Teacher::Teacher(char *name, int age, int salary): People(name, age), m_salary(salary){}
    void Teacher::display(){
        cout<<m_name<<"今年"<<m_age<<"岁了，是一名教师，每月有"<<m_salary<<"元的收入。"<<endl;
    }
    int main(){
        People *p = new People("王志刚", 23); // 指针
        p -> display();
        p = new Teacher("赵宏佳", 45, 8200);
        p -> display();

        People  p("王志刚", 23);
        Teacher t("赵宏佳", 45, 8200);
        People &pt = p;    // 引用
        People &tt = t;    // 引用
        p -> display();
        t -> display();

        return 0;
    }

    由于引用类似于常量，只能在定义的同时初始化，并且以后也要从一而终，不能再引用其他数据，所以本例中必须要定义两个引用变量，一个用来引用基类对象，一个用来引用派生类对象。
    不过引用不像指针灵活，指针可以随时改变指向，而引用只能指代固定的对象，在多态性方面缺乏表现力，所以以后我们再谈及多态时一般是说指针。

    虚函数:
        1) 只需要在虚函数的声明处加上 virtual 关键字，函数定义处可以加也可以不加。
        2) 为了方便，你可以只将基类中的函数声明为虚函数，这样所有派生类中具有遮蔽（覆盖）关系的同名函数都将自动成为虚函数。
        3) 当在基类中定义了虚函数时，如果派生类没有定义新的函数来遮蔽此函数，那么将使用基类的虚函数。
        4) 只有派生类的虚函数遮蔽基类的虚函数（函数原型相同）才能构成多态（通过基类指针访问派生类函数）。例如基类虚函数的原型为virtual void func();，派生类虚函数的原型为virtual void func(int);
            那么当基类指针 p 指向派生类对象时，语句p -> func(100);将会出错，而语句p -> func();将调用基类的函数。
        5) 构造函数不能是虚函数。对于基类的构造函数，它仅仅是在派生类构造函数中被调用，这种机制不同于继承。也就是说，派生类不继承基类的构造函数，将构造函数声明为虚函数没有什么意义。
        6) 析构函数可以声明为虚函数，而且有时候必须要声明为虚函数，这点我们将在下节中讲解。

19、序列化/反序列化API
    //C++string序列化/反序列化API
    bool SerializeToString(string* output) const;
    bool ParseFromString(const string& data);
    //使用：
    void set_people()             
    {
        wp.set_name("sealyao");   
        wp.set_id(123456);        
        wp.set_email("sealyaog@gmail.com");
        wp.SerializeToString(&pstring);
    }
    
    void get_people()             
    {
        rsp.ParseFromString(pstring);  
        cout << "Get People from String:" << endl;
        cout << "\t Name : " <<rsp.name() << endl;
        cout << "\t Id : " << rsp.id() << endl;
        cout << "\t email : " << rsp.email() << endl;
    }

    //文件描述符的序列化/反序列化API
    bool SerializeToFileDescriptor(int file_descriptor) const;
    bool ParseFromFileDescriptor(int file_descriptor);
    
    //使用:
    void set_people()
    {
        fd = open(path,O_CREAT|O_TRUNC|O_RDWR,0644);
        if(fd <= 0){
            perror("open");
            exit(0); 
        }   
        wp.set_name("sealyaog");
        wp.set_id(123456);
        wp.set_email("sealyaog@gmail.com");
        wp.SerializeToFileDescriptor(fd);   
        close(fd);
    }
    
    void get_people()
    {
        fd = open(path,O_RDONLY);
        if(fd <= 0){
            perror("open");
            exit(0);
        }
        rp.ParseFromFileDescriptor(fd);
        std::cout << "Get People from FD:" << endl;
        std::cout << "\t Name : " <<rp.name() << endl;
        std::cout << "\t Id : " << rp.id() << endl;
        std::cout << "\t email : " << rp.email() << endl;
        close(fd);
    }

20、java转换C++时，jni的GetStringUTFChars(a, NULL)的参数a如果是null的话，会crash掉

21、C++异常处理
    // 自定义异常类
    class MyException
    {
    public:
        MyException()
        {
        }

        MyException(char* str)
        {
            msg = str;
        }

        MyException(MyException& rhs)
        {
            this->msg = rhs.msg;
        }

        std::string msg;
    };

    // 抛出异常
    void CallWithException()
        {
            char msg[1024] = { 0 };
            sprintf(msg, "Exception: %s", "shit");
            throw MyException(msg);
        }

    // 捕捉异常
    try
        {
            CallWithException();
        }
        catch (MyException& e)
        {
            cout << e.msg;
        }

22、同 C 语言类似，C++ 模块化编程在 .cpp 文件（C 语言中是.c）中定义函数，在 .h 文件（ C 语言也是.h）中声明函数和类。

23、将项目的代码分门别类、有规划地放到不同的源文件中，即所谓的模块化编程（也称为多文件编程）。