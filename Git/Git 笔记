1、在Git中，用HEAD表示当前版本，也就是最新的提交版本
    上一个版本就是HEAD^，
    上上一个版本就是HEAD^^，
    往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
    Git允许我们在版本的历史之间穿梭，回退到之前版本或之后版本，使用命令git reset --hard commit_id。
    例如：git reset --hard acef8d3 

2、怎么撤销git init过的文件
    sudo rm -rf .git/
    rm -f .git
    rm -rf .git（有效）

3、修改最后一次提交
    $ git commit -m 'initial commit'
    $ git add forgotten_file
    $ git commit --amend：修改最后一次提交
    $ git rebase -i HEAD~3：修改多个提交说明，指的是四次提交之前

4、取消已经暂存的文件
    git reset HEAD <file>...   
    $ git add .
    $ git status
    On branch master
    Changes to be committed:
    (use "git reset HEAD <file>..." to unstage)
        modified:   README.txt
        modified:   benchmarks.rb

5、取消对文件的修改：git checkout -- <file>...
        use "git checkout -- <file>..." to discard changes in working directory)
    新建分支并切换到该分支，运行 git checkout 并加上 -b 参数：
        $ git checkout -b iss53
        Switched to a new branch 'iss53'
    这相当于执行下面这两条命令：
        $ git branch iss53
        $ git checkout iss53；
        $ git checkout master
        Switched to branch 'master'
    git branch -d 选项执行分支删除操作：
        $ git branch -d hotfix
        Deleted branch hotfix (was 3a0874c)

6、查看当前的远程库:git remote // git remote -v

7、添加远程仓库：git remote add [shortname] [url]；
   例如 $ git remote add pb git://github.com/paulboone/ticgit.git

8、从远程仓库抓取数据：git fetch [remote-name]
    git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）
    需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。
    可以使用 git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。

9、推送数据到远程仓库：git push [remote-name] [branch-name]；$ git push origin master

10、查看远程仓库信息：git remote show [remote-name] 查看某个远程仓库的详细信息，比如要看所克隆的 origin 仓库，可以运行：$ git remote show origin

11、远程仓库的删除和重命名：git remote rename 命令修改某个远程仓库在本地的简称，比如想把 pb 改成 paul，可以这么运行：$ git remote rename pb paul

12、查看各个分支最后一个提交对象的信息，运行 git branch -v
13、筛选出你已经（或尚未）与当前分支合并的分支，可以用 --merged 和 --no-merged；git branch --merged 查看哪些分支已被并入当前分支

14、Git 工作区、暂存区和版本库
        工作区：就是你在电脑里能看到的目录。
        暂存区：英文叫stage, 或index。一般存放在"git目录"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。
        版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
        工作区修改（或新增）的文件执行 "git add" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。
        执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新
        执行 "git reset HEAD" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响
        执行 "git rm --cached <file>" 命令时，会直接从暂存区删除文件，工作区则不做出改变。
        执行 "git checkout ." 或者 "git checkout -- <file>" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。
        执行 "git checkout HEAD ." 或者 "git checkout HEAD <file>" 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。
        这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。
        默认情况下，git rm file 会将文件从缓存区和你的硬盘中（工作目录）删除。如我们删除 hello.php文件：$ git rm hello.php 会将文件从缓存区和你的硬盘中（工作目录）删除。 
        如果要在工作目录中留着该文件，可以使用命令：git rm --cached <file>

15、Git 标签
        如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，git tag -a v1.0 命令给最新一次提交打上（HEAD）"v1.0"的标签

16、远程库
        查看当前的远程库：$ git remote
        $ git remote -v 加上 -v 参数，你还可以看到每个别名的实际链接地址
        提取远程仓库的更新：git fetch // git pull
        例如：$ git fetch origin 之后立即执行 $ git merge origin/master
        git merge用途：用于git-pull中，来整合另一代码仓库中的变化（即：git pull = git fetch + git merge）
        删除远程仓库：git remote rm [别名]

16、Git push命令用法：$ git push <远程主机名> <本地分支名>:refs/for/<远程分支名>
    git push常见用法：
        $ git push origin master
        该命令的作用是将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。
        $ git push origin :master
        # 等同于
        $ git push origin --delete master
        上面命令表示删除origin主机的master分支。如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。
        $ git push origin
        上面命令表示，将当前分支推送到origin主机的对应分支。如果当前分支只有一个追踪分支，那么主机名都可以省略。
        $ git push
        如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。
        $ git push -u origin master

17、仓库内添加配置文件步骤，Git提交步骤
        ~/17cy$ cd system/core                                   # 进入仓库目录
        ~/17cy/system/core$ mkdir .ciconfig                      # 新建目录 .ciconfig
        ~/17cy/system/core$ cd .ciconfig                         # 进入目录 .ciconfig
        ~/17cy/system/core/.ciconfig$ touch UnitTest.yaml        # 新建 ut 配置文件 UnitTest.yaml
        ~/17cy/system/core/.ciconfig$ cd -
        /home/yanshulei/17cy/system/core
        ~/17cy/system/core$ git status                               # 查看更改
        ~/17cy/system/core$ git add .                                # 提交更改到缓存区
        ~/17cy/system/core$ git commit -m "add ut configure file"    #提交更改到本地库
        ~/17cy/system/core$ git push origin master:refs/for/master   #推送到远程分支

18、 配置本地开发ssh公钥与私钥
        1、 如果没生成过ssh key，请先在本机生成一个ssh key：
            ssh-keygen -t rsa
        2、 生成公钥与私钥，在 ~/.ssh 文件夹下，id_rsa是私钥， id_rsa.pub是公钥。
            将公钥内容复制到igerrit.storm上的setting的ssh公钥上。
            
19、首次使用idea，也是首次使用Git，想把代码同步到git上边去
    在git上创建SSH Key
    1、在终端中输入
        ssh-keygen -t rsa -C "username" (注：username为你git上的用户名)
    2、三次回车，如有看到The key's randomart image is，代表你的SSH Key生成成功了。
        cat ~/.ssh/id_rsa.pub
        ssh-rsa AAAAB 后边一长串就是你的SSH Key了。
    3、然后将一长串SSH Key粘贴到自己的git账户上。