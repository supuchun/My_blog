1、API：系统函数API和库函数API
    API（Application Programming Interface,应用程序编程接口），指的是我们用户程序编程调用的如read(),write(),malloc(),free()之类的调用的是glibc库提供的库函数。
    API直接提供给用户编程使用，运行在用户态。这里要另外提一下，POSIX针对API提出标准，即针对API的函数名，返回值，参数类型进行规范约束，但是并不管API具体如何实现。
2、系统调用
    操作系统为用户态进程与硬件设备进行交互提供了一组接口——系统调用。通过软中断或系统调用指令向内核发出一个明确的请求，内核将调用内核相关函数来实现（如sys_read(),sys_write()）。
    用户程序不能直接调用这些Sys_read,sys_write等函数。这些函数运行在内核态。
3、API 和系统调用是不同的：API只是一个函数定义；系统调用通过软中断向内核发出一个明确的请求
    通常API函数库中的函数（如read（））会调用封装例程，封装例程负责发起系统调用（通过发软中断或系统调用指令），这些都运行在用户态。 
    内核开始接收系统调用后，cpu从用户态切换到内核态（cpu处于什么状态，程序就处于什么状态，所以很多地方也说程序从用户态切换到内核态，实际是cpu运行级别的切换，在Linux中cpu 运行在3级表示用户态，运行在0级表示内核态）。 
    内核调用相关的内核函数来处理再逐步返回给封装例程，cpu进行一次内核态到用户态的切换，API函数从封装例程拿到结果，再处理完后返回给用户。-1在多数情况下表示内核不能满足进程的请求
4、Linux系统提供三种接口：
    1、图形界面操作接口，Linux系统一般提供KDE、Gnome等图形界面接口，目的是方便普通用户操作计算机。
    2、控制台接口，即终端接口，Linux系统一般提供bash shell、cshell等等终端接口，目的是方便系统管理员操作计算机，事实上Linux功能的强大也主要体现在终端接口。
    3、API接口：即apllication interface，这是应用程序接口，从编程角度Linux系统就是一个大的程序调用库，它提供大量的API函数，目的是方便程序员开发应用程序。
5、系统函数调用提供的函数如open, close, read, write, ioctl等，系统调用发生在内核空间，因此如果在用户空间的一般应用程序中使用系统调用来进行文件操作，会有用户空间到内核空间切换的开销。
    事实上，即使在用户空间使用库函数来对文件进行操作，因为文件总是存在于存储介质上，因此不管是读写操作，都是对硬件(存储器)的操作，都必然会引起系统调用。也就是说，
    库函数对文件的操作实际上是通过系统调用来实现的。例如C库函数fwrite()就是通过write()系统调用来实现的。库函数调用：标准C库函数提供的文件操作函数如fopen, fread, fwrite, fclose等，
    库函数对文件的操作最终是通过系统调用实现的，因此，每打开一个文件所获得的FILE结构指针都有一个内核空间的文件描述符fd与之对应。
    库函数调用通常用于应用程序中对一般文件的访问。
　　库函数调用是系统无关的，因此可移植性好。
　　由于库函数调用是基于C库的，不可能用于内核空间的驱动程序中对设备的操作
6、linux下系统调用、API、系统命令，内核函数的区别与联系
        1.系统调用：
            应用程序和内核间的桥梁，是应用程序访问内核的入口点;但通常情况下，应用程序通过操作系统提供的API进行编程而不是使用系统调用直接编程; linux的全部系统调用加起来大约只有250个左右。
        2.API：
            API常以c库(libc)的形式提供，c库提供了绝大部分API，每个系统调用在c库中都有对应的封装函数(通常封装函数与系统调用的名称相同)。系统调用与c库函数并不是一一对应的，
            有些c库函数可能使用多个系统调用来实现，也有可能多个c库函数使用同一个系统调用来实现，也有些c库函数不使用任何系统调用来实现。
        3.系统命令：
            系统命令是使用linux提供的c库函数实现的可执行程序，可用strace查看命令执行时所使用的系统调用。
        4.内核函数：
            系统调用是用户进入内核的接口，它本身不是内核函数，进入内核后每个系统调用会找到自己对应的内核函数(即系统调用服务例程)
            从用户的角度看，从底层往上看分别是：内核函数，系统调用，API，系统命令
7、库函数（Library function）是把函数放到库里，供别人使用的一种方式。.方法是把一些常用到的函数编完放到一个文件里，供不同的人进行调用。调用的时候把它所在的文件名用#include<>加到里面就可以了。
    一般是放到lib文件里的。函数库是由系统建立的具有一定功能的函数的集合。库中存放函数的名称和对应的目标代码，以及连接过程中所需的重定位信息。用户也可以根据自己的需要建立自己的用户函数库。
    库函数：存放在函数库中的函数。库函数具有明确的功能、入口调用参数和返回值。
8、系统调用运行在内核模式，库函数运行在用户模式。调用库函数是为了使用系统调用。 linux几乎库函数和系统调用一一对应。库是可重用的模块 处于用户态系统调用是os提供的服务处于内核态不能直接调用 
    而要使用类似int 0x80的软中断陷入内核 所以库函数中有很大部分是对系统调用的封装。库函数的实现方式，一般都是对系统调用的再次封装。fread 里面调用read等。