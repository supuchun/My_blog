1、学习C语言是了解内存布局的最简单、最直接、最有效的途径，C语言简直是为内存而生的，它比任何一门编程语言都贴近内存。程序是在内存中运行的。
   不了解内存，就学不会进程和线程，就没有资格玩中大型项目，没有资格开发底层组件，没有资格架构一个系统，命中注定你就是一个菜鸟，成不了什么气候。
   C语言就是为内存而生的，C语言的设计和内存的布局是严密贴合的，我因为学习C语言而吃透了内存，了解了计算机内存是如何分布和组织的。
   攻克内存后也能够理解进程和线程了，进程和线程也是围绕内存打转的，从一定程度上讲，它们的存在也是为了更加高效地利用内存。
   从C语言到内存，从内存到进程和线程，环环相扣：不学C语言就吃不透内存，不学内存就吃不透进程和线程。
   「内存 + 进程 + 线程」这几个最基本的计算机概念是菜鸟和大神的分水岭，也只有学习C语言才能透彻地理解它们。
   Java、C#、PHP、Python、JavaScript 程序员工作几年后会遇到瓶颈，有很多人会回来学习C语言，重拾底层概念，让自己再次突破。
2、内存条是一个非常精密的部件，包含了上亿个电子元器件，它们很小，达到了纳米级别。这些元器件，实际上就是电路；电路的电压会变化，要么是 0V，要么是 5V，只有这两种电压。
   5V 是通电，用1来表示，0V 是断电，用0来表示。所以，一个元器件有2种状态，0 或者 1。
   一般情况下我们不一个一个的使用元器件，而是将8个元器件看做一个单位，即使表示很小的数，例如 1，也需要8个，也就是 00000001。
3、1个元器件称为1比特（Bit）或1位，8个元器件称为1字节（Byte），那么16个元器件就是2Byte，32个就是4Byte，以此类推：
    8×1024个元器件就是1024Byte，简写为1KB；
    8×1024×1024个元器件就是1024KB，简写为1MB；
    8×1024×1024×1024个元器件就是1024MB，简写为1GB。
4、那么，QQ是怎么运行起来的呢？
    首先，有一点你要明确，你安装的QQ软件是保存在硬盘中的。
    双击QQ图标，操作系统就会知道你要运行这个软件，它会在硬盘中找到你安装的QQ软件，将数据（安装的软件本质上就是很多数据的集合）复制到内存。
    对！就是复制到内存！QQ不是在硬盘中运行的，而是在内存中运行的。
    为什么呢？因为内存的读写速度比硬盘快很多。
    对于读写速度，内存 > 固态硬盘 > 机械硬盘。机械硬盘是靠电机带动盘片转动来读写数据的，而内存条通过电路来读写数据，电机的转速肯定没有电的传输速度（几乎是光速）快。
    虽然固态硬盘也是通过电路来读写数据，但是因为与内存的控制方式不一样，速度也不及内存。
    所以，不管是运行QQ还是编辑Word文档，都是先将硬盘上的数据复制到内存，才能让CPU来处理，这个过程就叫作载入内存（Load into Memory）。
    完成这个过程需要一个特殊的程序（软件），这个程序就叫做加载器（Loader）。
    CPU直接与内存打交道，它会读取内存中的数据进行处理，并将结果保存到内存。如果需要保存到硬盘，才会将内存中的数据复制到硬盘。例如，打开Word文档，输入一些文字，虽然我们看到的不一样了，
    但是硬盘中的文档没有改变，新增的文字暂时保存到了内存，Ctrl+S才会保存到硬盘。因为内存断电后会丢失数据，所以如果你编辑完Word文档忘记保存就关机了，那么你将永远无法找回这些内容。
5、虚拟内存
    如果我们运行的程序较多，占用的空间就会超过内存（内存条）容量。例如计算机的内存容量为2G，却运行着10个程序，这10个程序共占用3G的空间，也就意味着需要从硬盘复制 3G 的数据到内存，这显然是不可能的。
    操作系统（Operating System，简称 OS）为我们解决了这个问题：当程序运行需要的空间大于内存容量时，会将内存中暂时不用的数据再写回硬盘；需要这些数据时再从硬盘中读取，并将另外一部分不用的数据写入硬盘。
    这样，硬盘中就会有一部分空间用来存放内存中暂时不用的数据。这一部分空间就叫做虚拟内存（Virtual Memory）。
    3G - 2G = 1G，上面的情况需要在硬盘上分配 1G 的虚拟内存。
    硬盘的读写速度比内存慢很多，反复交换数据会消耗很多时间，所以如果你的内存太小，会严重影响计算机的运行速度，甚至会出现”卡死“现象，即使CPU强劲，也不会有大的改观。
    如果经济条件允许，建议将内存升级为 4G，在 win7、win8、win10 下运行软件就会比较流畅了。
    总结：CPU直接从内存中读取数据，处理完成后将结果再写入内存。
6、可执行程序的内部是一系列计算机指令和数据的集合，它们都是二进制形式的，CPU 可以直接识别，毫无障碍；但是对于程序员，它们非常晦涩，难以记忆和使用。
   编译器能够识别代码中的词汇、句子以及各种特定的格式，并将他们转换成计算机CPU能够识别的二进制形式，这个过程称为编译（Compile）。
7、C语言的编译器有很多种，不同的平台下有不同的编译器，例如：
        Windows 下常用的是微软开发的 cl.exe，它被集成在 Visual Studio 或 Visual C++ 中，一般不单独使用；
        Linux 下常用的是 GUN 组织开发的 GCC，很多 Linux 发行版都自带 GCC；
8、搭建开发环境，也就是安装编译器或者 IDE（集成开发环境）
9、字符串必须在一行内结束，不能换行。
10、C语言中这样向内存中放整数：a=123; =在C语言中，这个过程叫做赋值（Assign）。赋值是指把数据放到内存的过程。第一次赋值，也称变量的初始化，或者赋初值。
    数据是放在内存中的，变量是给这块内存起的名字，有了变量就可以找到并使用这份数据。
11、%d 输出整数，%s 输出字符串
    在C语言中没有专门的字符串类型，我们只能使用数组或者指针来间接地存储字符串。
        char str1[] = "http://c.biancheng.net";
        char *str2 = "C语言中文网";
12、C语言支持单行注释和多行注释：
    单行注释以//开头，直到本行末尾（不能换行）；
    多行注释以/*开头，以*/结尾，注释内容可以有一行或多行。
13、强制类型转换的格式为：
    (type_name) expression， verage = (double) sum / count;
14、C语言中，有三个函数可以用来在显示器上输出数据，它们分别是：
        puts()：只能输出字符串，并且输出结束后会自动换行
        putchar()：只能输出单个字符
        printf()：可以输出各种类型的数据
        %c	输出一个单一的字符，%s	输出一个字符串，%d	输出一个字符串，%-9d中，d表示以十进制输出，9表示最少占9个字符的宽度，宽度不足以空格补齐，-表示左对齐。
    在C语言中，有多个函数可以从键盘获得用户输入：
        scanf()：和 printf() 类似，scanf() 可以输入多种类型的数据。
        getchar()、getche()、getch()：这三个函数都用于输入单个字符。
        gets()：获取一行数据，并作为字符串处理。
        scanf 和 printf 非常相似，只是功能相反罢了：
        scanf("%d %d", &a, &b);  // 获取用户输入的两个整数，分别赋值给变量 a 和 b
        printf("%d %d", a, b);  // 将变量 a 和 b 的值在显示器上输出
        printf() 输出字符串时，会从第 0 个元素开始往后检索，直到遇见'\0'才停止，然后把'\0'前面的字符全部输出，这就是 printf() 输出字符串的原理。
15、需要留意一个坑，字符数组只有在定义时才能将整个字符串一次性地赋值给它，一旦定义完了，就只能一个字符一个字符地赋值了。请看下面的例子：
        char str[7];
        str = "abc123";  //错误
        //正确
        str[0] = 'a'; str[1] = 'b'; str[2] = 'c';
        str[3] = '1'; str[4] = '2'; str[5] = '3';
        char str[] = "c.biancheng.net";  //这种形式更加简洁，实际开发中常用；C语言中，字符串总是以'\0'作为结尾，一旦遇到'\0'就认为到达了字符串的末尾，就结束处理。
16、strcpy() 会把 arrayName2 中的字符串拷贝到 arrayName1 中，字符串结束标志'\0'也一同拷贝。
17、冒泡排序
        对数组元素进行排序的方法有很多种，比如冒泡排序、归并排序、选择排序、插入排序、快速排序等，其中最经典最需要掌握的是「冒泡排序」。
        以从小到大排序为例，冒泡排序的整体思想是这样的：
        从数组头部开始，不断比较相邻的两个元素的大小，让较大的元素逐渐往后移动（交换两个元素的值），直到数组的末尾。经过第一轮的比较，就可以找到最大的元素，并将它移动到最后一个位置。
        第一轮结束后，继续第二轮。仍然从数组头部开始比较，让较大的元素逐渐往后移动，直到数组的倒数第二个元素为止。经过第二轮的比较，就可以找到次大的元素，并将它放到倒数第二个位置。
        以此类推，进行 n-1（n 为数组长度）轮“冒泡”后，就可以将所有的元素都排列好。
        整个排序过程就好像气泡不断从水里冒出来，最大的先出来，次大的第二出来，最小的最后出来，所以将这种排序方式称为冒泡排序（Bubble Sort）。
18、形参和实参有以下几个特点：
        1) 形参变量只有在函数被调用时才会分配内存，调用结束后，立刻释放内存，所以形参变量只有在函数内部有效，不能在函数外部使用。
        2) 实参可以是常量、变量、表达式、函数等，无论实参是何种类型的数据，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参，所以应该提前用赋值、输入等办法使实参获得确定值。
        3) 实参和形参在数量上、类型上、顺序上必须严格一致，否则会发生“类型不匹配”的错误。
        4）函数调用中发生的数据传送是单向的，只能把实参的值传送给形参，而不能把形参的值反向地传送给实参。 因此在函数调用过程中，形参的值发生改变，而实参中的值不会变化。
19、没有返回值的函数为空类型，用void进行说明。为了使程序有良好的可读性并减少出错， 凡不要求返回值的函数都应定义为 void 类型。
20、声明（Declaration），就是告诉编译器我要使用这个函数，你现在没有找到它的定义不要紧，请不要报错，稍后我会把定义补上。
    有了函数声明，函数定义就可以出现在任何地方了，甚至是其他文件、静态链接库、动态链接库等。
21、函数在它的函数体内调用它自身称为递归调用，这种函数称为递归函数。为了防止递归调用无终止地进行，必须在函数内有终止递归调用的手段。常用的办法是加条件判断，满足某种条件后就不再作递归调用，然后逐层返回。 
22、局部变量
    定义在函数内部的变量称为局部变量（Local Variable），它的作用域仅限于函数内部， 离开该函数后就是无效的，再使用就会报错。
    1) 在 main 函数中定义的变量也是局部变量，只能在 main 函数中使用；同时，main 函数中也不能使用其它函数中定义的变量。main 函数也是一个函数，与其它函数地位平等。
    2) 形参变量、在函数体内定义的变量都是局部变量。实参给形参传值的过程也就是给局部变量赋值的过程。
    3) 可以在不同的函数中使用相同的变量名，它们表示不同的数据，分配不同的内存，互不干扰，也不会发生混淆。
    4) 在语句块中也可定义变量，它的作用域只限于当前语句块。
    全局变量
    在所有函数外部定义的变量称为全局变量（Global Variable），它的作用域默认是整个程序，也就是所有的源文件，包括 .c 和 .h 文件。
23、标准C语言（ANSI C）共定义了15 个头文件，称为“C标准库”，所有的编译器都必须支持。
    合格程序员：<stdio.h>、<ctype.h>、<stdlib.h>、<string.h>
    熟练程序员：<assert.h>、<limits.h>、<stddef.h>、<time.h>
    优秀程序员：<float.h>、<math.h>、<error.h>、<locale.h>、<setjmp.h>、<signal.h>、<stdarg.h>
24、宏定义是预处理命令的一种，它允许用一个标识符来表示一个字符串。 #define N 100就是宏定义，N为宏名，100是宏的内容
        宏定义的一般形式为：
        #define  宏名  字符串
25、#if、#elif、#else 和 #endif 都是预处理命令，整段代码的意思是：如果宏 _WIN32 的值为真，就保留第 4、5 行代码，删除第 7、9 行代码；
    在预处理阶段完成的，多余的代码以及所有的宏都不会参与编译，不仅保证了代码的正确性，还减小了编译后文件的体积。
    #if 命令
        #if 命令的完整格式为：
        #if 整型常量表达式1
            程序段1
        #elif 整型常量表达式2
            程序段2
        #elif 整型常量表达式3
            程序段3
        #else
            程序段4
        #endif
    #ifdef 命令
        #ifdef 命令的格式为：
        #ifdef  宏名
            程序段1
        #else
            程序段2
        #endif
    #ifndef 命令： #ifdef 改为了 #ifndef。它的意思是，如果当前的宏未被定义，则对“程序段1”进行编译
        #ifndef 命令的格式为：
        #ifndef 宏名
            程序段1 
        #else 
            程序段2 
        #endif
26、一切都是地址：拥有读取和执行权限的内存块就是代码，而拥有读取和写入权限（也可能只有读取权限）的内存块就是数据。
    CPU 访问内存时需要的是地址，而不是变量名和函数名！变量名和函数名只是地址的一种助记符，当源文件被编译和链接成可执行程序后，它们都会被替换成地址。
    编译和链接过程的一项重要任务就是找到这些名称所对应的地址。变量名、函数名、字符串名和数组名在本质上是一样的，它们都是地址的助记符，表示的是代码块或数据块的首地址。
    指针（Pointer）就是内存的地址，C语言允许用一个变量来存放指针，这种变量称为指针变量。指针变量可以存放基本类型数据的地址，也可以存放数组、函数以及其他指针变量的地址。
    使用指针变量之前一定要初始化，否则就不能确定指针指向哪里，如果它指向的内存没有使用权限，程序就崩溃了。对于暂时没有指向的指针，建议赋值NULL。
27、数组（Array），它是一组具有相同类型的数据的集合。用结构体（Struct）来存放一组不同类型的数据。结构体的定义形式为：
            struct 结构体名{
                结构体所包含的变量或数组
            };
    结构体和共用体的区别在于：结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。
28、结构体定义时，我们可以指定某个成员变量所占用的二进制位数（Bit），这就是位域。C语言标准规定，位域的宽度不能超过它所依附的数据类型的长度。
    通俗地讲，成员变量都是有类型的，这个类型限制了成员变量的最大长度，:后面的数字不能超过这个长度。
29、使用关键字 typedef 可以为类型起一个新的别名，语法格式为：
    typedef  oldName  newName;
30、const 变量称为常量（Constant）。创建常量的格式通常为：
    const type name = value;