Linux C/C++ 开发（Linux 服务器开发）这个方向
    目前从事 Linux C/C++ 开发的程序员很多，尤其是像百度、腾讯、阿里这样的大公司，他们的网站流量巨大，业务逻辑复杂，会遇到很多瓶颈，需要开发底层服务来提高程序效率，快速响应用户请求。
    这些公司的 Linux C/C++ 开发属于底层开发（后台服务、算法支持等），而不是应用开发，编写的程序在后台运行，没有界面，不直接面向用户。
    有了数年应用开发的经验，对用户、业务、交互等都非常了解了，转底层开发很容易，也知道应用层的瓶颈在哪里，明白如何在底层做优化。
    那么，这个方向到底适合不适合初学者呢？初学者肯定可以学习，也肯定能找到相关的工作，但是，如果没有应用开发的经验，个人认为只学底层开发是非常枯燥的，因为每天面对一堆理论，早晚吐血。
    初学者可以给自己树立一个目标，做一个类似 QQ 这样的软件出来，它可以有无限的优化空间，比如：
        刚开始只是用 Qt、GTK+、WxWidgets、Fltk 等 GUI 库构建了一个界面，并不能发送和接受信息。
        增加一对一聊天功能，在这个过程中可以学习通信（socket）。
        同时支持多人聊天，每增加一个对话就开启了一个线程，这个过程中可以学习多线程编程。
        提高服务器的性能，让单台服务器同时抗住一万个人聊天，这个时候你可能就需要去优化程序了，就需要关注线程创建、调度的开销，关注通信过程中的缓存。
        增加群聊功能，让服务器可以给多个用户发送消息，这个时候你对通信的理解将更加深入。
        最后呢，你可以将多台服务器联合起来，抗住几十万人甚至上百万人聊天。
    你可以自己完成这个项目，也可以组队完成，在这个过程中你将会全方位的学习 Linux C/C++ 编程。
    总之，初学者要让学习过程变得有趣，不要天天研究操作系统、数据结构、算法、内存、线程进程、通信等理论，一定要去实践。
    
1、虚函数的定义要遵循以下重要规则： 
    1.如果虚函数在基类与派生类中出现，仅仅是名字相同，而形式参数不同，或者是返回类型不同，那么即使加上了virtual关键字，也是不会进行滞后联编的。 
    2.只有类的成员函数才能说明为虚函数，因为虚函数仅适合用与有继承关系的类对象，所以普通函数不能说明为虚函数。 
    3.静态成员函数不能是虚函数,因为静态成员函数的特点是不受限制于某个对象。 
    4.内联(inline)函数不能是虚函数，因为内联函数不能在运行中动态确定位置。即使虚函数在类的内部定义定义，但是在编译的时候系统仍然将它看做是非内联的。 
    5.构造函数不能是虚函数，因为构造的时候，对象还是一片位定型的空间，只有构造完成后，对象才是具体类的实例。 
    6.析构函数可以是虚函数,而且通常声名为虚函数。 
2、在C++中,类和结构是只有一个区别的：类的成员默认是private，而结构是public。
   C和C++中都有结构的概念，但是在C语言中结构只有成员变量，而没成员方法，而在C++中结构中，它可以有自己的成员变量和成员函数。但是在C语言中结构的成员是公共的，
   什么想访问它的都可以访问；而在VC++中没有加限定符的类的成员默认是private，而结构是public。
3、将func1和func2封装成一个DLL，能够直接让func3调用
4、静态库和动态库是两种共享程序代码的方式，它们的区别是：静态库在程序的链接阶段被复制到了程序中，和程序运行的时候没有关系；动态库在链接阶段没有被复制到程序中，
   而是程序在运行时由系统动态加载到内存中供程序调用。使用动态库的优点是系统只需载入一次动态库，不同的程序可以得到内存中相同的动态库的副本，因此节省了很多内存。
   Windows下动态库为.dll后缀，在linux在为.so后缀。